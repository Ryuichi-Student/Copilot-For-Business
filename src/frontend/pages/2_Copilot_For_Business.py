# TODO: Reduce the number of tokens used (the database merger!)
# TODO: Add a stop and a fast forward button during text stream button
# TODO: Add a progress bar for the database merger
# TODO: Remove the folder in the database merger
# TODO: Optimise single database queries
# TODO: Add session rename feature
# TODO: Limit the size of the graph (as I think the number of rows that are creating it slows this down too much) - add caching
# TODO: Handle errors more gracefully

import streamlit as st
import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))))

from src.backend.copilot import Copilot
from src.backend.utils.sessions import Session_Storage
from src.backend.utils.dbmaker import join_dbs, get_database_list
from src.backend.utils.gpt import stream


if "session_storage" not in st.session_state:
    st.session_state.session_storage = Session_Storage(st.rerun)
session_manager = st.session_state.session_storage


# ----------------------------------   Creating a session   ----------------------------------

def display_session_ui(p):
    print("Displaying session UI")
    # If there are no sessions or all are named, create a new one and flags it to be named.
    if session_manager.requires_autogenerated_session:
        session_manager.create_session(f"New Session", rerun=False)
        sessions = session_manager.get_sessions()
        session_manager.update_config(sessions[-1], {"autogenerate": True}, overwrite=False)

    sessions = session_manager.get_sessions()

    current_session_id = p.selectbox(
        label="Select a session:",
        options=sessions,
        format_func=lambda x: session_manager.get_session_data(x)['name'],
        index=0,  # Automatically switch to the most recent session ID
        key="session_id",
        on_change=lambda: session_manager.use_session(st.session_state.session_id),
    )  # type: ignore

    print(f"New session: {current_session_id}")
    return current_session_id


def create_copilot(current_session):
    print("Creating copilot")
    copilot = current_session['data']
    if copilot is None:
        print("Creating new copilot")
        options = st.session_state.selected_db
        print(options)
        args = join_dbs(options)
        if isinstance(args, dict):
            copilot = Copilot(db=args["name"], dbtype='sqlite', potential_embedded=args["embedded"], non_embedded=args["not-embedded"])
        else:
            copilot = Copilot(db=f"{args}", dbtype='sqlite')
        
        session_manager.update_session_data(current_session_id, data=copilot)
    return copilot


col1, col2 = st.columns([7, 3])

with st.sidebar:
    # Session data
    # TODO: Load from persistent storage
    _p = st.empty()
    current_session_id = display_session_ui(_p)


# ----------------------------------   Choosing databases   ----------------------------------


# Choose a database
l = get_database_list()
session_manager.update_config(current_session_id, {
    "selected_db": [] if not l else [max(l, key=os.path.getctime)],
    "query": None,
    "finished": False
}, overwrite=False)


def select_databases(placeholder, session_id):
    def _on_change():
        session_manager.update_config(
            session_id, {"selected_db": st.session_state.databases}
        )
        print(f"Loading databases: {st.session_state.databases}")

    options = placeholder.multiselect(
        label="Select databases to load",
        options=get_database_list(),
        default=session_manager.get_config(session_id, "selected_db"),
        on_change=_on_change,
        key="databases",
        disabled=session_manager.get_config(session_id, "query") is not None
    )

    return options


with st.sidebar:
    db_placeholder = st.empty()
    databases = select_databases(db_placeholder, current_session_id)


# ----------------------------------   Ask for query   ----------------------------------
col1, col2 = st.columns([7, 3])


with col1:
    # title
    st.header("Copilot for Business")
    st.subheader(session_manager.get_session_data(current_session_id)["name"])


if not session_manager.get_config(current_session_id, "query"):
    userQuery = st.chat_input("Enter your question")
    if userQuery:
        options = db_placeholder.multiselect(
            label="Select databases to load",
            options=get_database_list(),
            default=session_manager.get_config(current_session_id, "selected_db"),
            disabled=True
        )
        session_manager.update_config(current_session_id, {"query": userQuery})
        if session_manager.get_config(current_session_id, "autogenerate"):
            session_manager.update_config(current_session_id, {"autogenerate": False})
            placeholder = st.empty()
            for x in session_manager.update_session_name(current_session_id, userQuery):
                placeholder.text(x)
            placeholder.empty()

        st.rerun()
else:
    userQuery = session_manager.get_config(current_session_id, "query")


# ----------------------------------   Create a Copilot   ----------------------------------
def create_copilot():
    copilot = session_manager.get_session_data(current_session_id)["data"]
    if copilot is None:
        options = session_manager.get_config(current_session_id, "selected_db")
        print(options)
        args = join_dbs(options)
        if isinstance(args, dict):
            copilot = Copilot(db=args["name"], dbtype='sqlite', potential_embedded=args["embedded"], non_embedded=args["not-embedded"])
        else:
            print(f"Creating new copilot with {args}")
            copilot = Copilot(db=f"{args}", dbtype='sqlite')
        session_manager.update_session_data(current_session_id, data=copilot)
    return copilot


def handle_toggles_and_plot(current_session_id, userQuery):
    # Assuming 'plot' is a conditionally defined object indicating plotting is enabled
    if plot:
        fig = plot.generate()
        config = {'displayModeBar': False}
        _plot_placeholder.plotly_chart(fig, config=config)

        # Update for showing top 10 values toggle
        if plot.dfLength > 10:
            # Fetch current state and update it based on user interaction
            current_topN_state = False if "topN" not in st.session_state else st.session_state.topN
            topN = _plot_toggle_placeholder.toggle(label="Show top 10 values only", key="topN",
                                                   value=current_topN_state)

            # Apply the top 10 filter based on toggle state
            plot.topn(10, topN)

    current_sqlView_state = False if "sqlView" not in st.session_state else st.session_state.sqlView
    sqlView = _sql_toggle_placeholder.toggle("Show SQL", key="sqlView", value=current_sqlView_state)

    # Additional logic for displaying SQL and adjusting plot based on the SQL view state
    if sqlView:
        _sql_placeholder.write(copilot.get_sql(userQuery))
        if plot:
            plot.formatSQL()


if userQuery:
    copilot = create_copilot()

# ----------------------------------   Query the Copilot   ----------------------------------

    # display the user's entered prompt
    st.text(f"USER:\n{userQuery}\n\nCOPILOT:")

    status_placeholder = st.empty()
    if not session_manager.get_config(current_session_id, "finished"):
        status = status_placeholder.status("Thinking...")
        copilot.set_status_placeholder(status)
    copilot.query(userQuery)

    # button to allow the user to accept or remove

    t = copilot.get_early_answer(userQuery)
    if t:
        status_placeholder.empty()
        k = st.empty()
        if session_manager.get_config(current_session_id, "finished"):
            k.write(t)
        else:
            session_manager.update_config(current_session_id, {"finished": True})
            for x in stream(t):
                k.write(x)
    else:
        plot = copilot.get_plot(userQuery)

        status_placeholder.empty()
        _plot_placeholder = st.empty()
        _plot_toggle_placeholder = st.empty()
        _plot_toggle_placeholder.toggle(label="Show top 10 values only")
        _sql_placeholder = st.empty()
        _sql_toggle_placeholder = st.empty()
        _sql_toggle_placeholder.toggle("Show SQL")

        _t = st.empty()
        t = copilot.get_generalised_answer(userQuery)
        if t:
            if session_manager.get_config(current_session_id, "finished"):
                _t.write(t)
            else:
                session_manager.update_config(current_session_id, {"finished": True})
                for x in stream(t):
                    _t.write(x)
        else:
            st.markdown("Copilot for Business was not able to generate an answer. Please try to refine your question to help")

# none type has no attribute formatSQL
        handle_toggles_and_plot(current_session_id, userQuery)