import streamlit as st
import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))))

from src.backend.copilot import Copilot
from src.backend.utils.sessions import Session_Storage
from src.backend.utils.dbmaker import join_dbs, get_database_list
from src.backend.utils.gpt import stream



if "session_storage" not in st.session_state:
    st.session_state.session_storage = Session_Storage(st.rerun)
session_manager = st.session_state.session_storage


# ----------------------------------   Creating a session   ----------------------------------

def display_session_ui(p):
    print("Displaying session UI")
    # If there are no sessions or all are named, create a new one and flags it to be named.
    if session_manager.requires_autogenerated_session:
        session_manager.create_session(f"New Session", rerun=False)
        sessions = session_manager.get_sessions()
        session_manager.update_config(sessions[-1], {"autogenerate": True})

    sessions = session_manager.get_sessions()

    current_session_id = p.selectbox(
        label="Select a session:",
        options=sessions,
        format_func=lambda x: session_manager.get_session_data(x)['name'],
        index=0,  # Automatically switch to the most recent session ID
        key="session_id",
        on_change=lambda: session_manager.use_session(st.session_state.session_id),
    )  # type: ignore

    print(f"New session: {current_session_id}")
    return current_session_id


with st.sidebar:
    # Session data
    # TODO: Load from persistent storage
    _p = st.empty()
    current_session_id = display_session_ui(_p)


# ----------------------------------   Choosing databases   ----------------------------------


# Choose a database
l = get_database_list()
session_manager.update_config(current_session_id, {
    "selected_db": [] if not l else [max(l, key=os.path.getctime)],
    "query": None
}, overwrite=False)


def select_databases(placeholder, session_id):
    def _on_change():
        session_manager.update_config(
            session_id, {"selected_db": st.session_state.databases}
        )
        print(f"Loading databases: {st.session_state.databases}")

    options = placeholder.multiselect(
        label="Select databases to load",
        options=get_database_list(),
        default=session_manager.get_config(session_id, "selected_db"),
        on_change=_on_change,
        key="databases",
        disabled=session_manager.get_config(session_id, "query") is not None
    )

    return options


with st.sidebar:
    db_placeholder = st.empty()
    databases = select_databases(db_placeholder, current_session_id)


# ----------------------------------   Ask for query   ----------------------------------
col1, col2 = st.columns([7, 3])


with col1:
    # title
    st.header("Copilot for Business")
    st.subheader(session_manager.get_session_data(current_session_id)["name"])


if not session_manager.get_config(current_session_id, "query"):
    userQuery = st.chat_input("Enter your question")
    if userQuery:
        options = db_placeholder.multiselect(
            label="Select databases to load",
            options=get_database_list(),
            default=session_manager.get_config(current_session_id, "selected_db"),
            disabled=True
        )
        session_manager.update_config(current_session_id, {"query": userQuery})
        session_manager.update_config(current_session_id, {"autogenerate": False})
        placeholder = st.empty()
        for x in session_manager.update_session_name(current_session_id, userQuery):
            placeholder.text(x)
        placeholder.empty()

        st.rerun()
else:
    userQuery = session_manager.get_config(current_session_id, "query")


# ----------------------------------   Create a Copilot   ----------------------------------
def create_copilot():
    copilot = session_manager.get_session_data(current_session_id)["data"]
    if copilot is None:
        options = session_manager.get_config(current_session_id, "selected_db")
        print(options)
        database = join_dbs(options)
        copilot = Copilot(db=f"{database}", dbtype='sqlite')
        session_manager.update_session_data(current_session_id, data=copilot)
    return copilot

if userQuery:
    copilot = create_copilot()

# ----------------------------------   Query the Copilot   ----------------------------------

    # display the user's entered prompt
    st.text(f"USER:\n{userQuery}\n\nCOPILOT:")

    status_placeholder = st.empty()
    status = status_placeholder.status("Thinking...")
    copilot.set_status_placeholder(status)
    copilot.query(userQuery)

    # button to allow the user to accept or remove

    t = copilot.get_early_answer(userQuery)
    if t:
        k = st.empty()
        for x in stream(t):
            k.write(x)
        status_placeholder.empty()
    else:
        plot = copilot.get_plot(userQuery)

        status_placeholder.empty()

        if plot:
            fig = plot.generate()
            config = {'displayModeBar': None}

            # displays the chart created
            st.plotly_chart(fig, config=config)

            # adds a toggle to show the top 10 values of the dataframe only
            if plot.dfLength > 10:
                topN = st.toggle("Show top 10 values only", False)
                if topN: plot.topn(10, topN)
                else: plot.topn(10, topN)

        sqlView = st.toggle("Show SQL", False)
        if sqlView:
            st.write(copilot.get_sql(userQuery))
            if plot:
                plot.formatSQL()

        t = copilot.get_generalised_answer(userQuery)
        if t:
            for x in stream(t):
                st.write(x)
