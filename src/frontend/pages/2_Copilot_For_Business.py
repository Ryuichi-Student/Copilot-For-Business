from glob import glob
import streamlit as st
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))))

from src.backend.copilot import Copilot
from src.backend.utils.sessions import Session_Storage
from src.backend.utils.dbmaker import join_dbs


def get_database_list():
    list_of_databases = glob("databases/*.sqlite3")
    list_of_databases.extend(glob("databases/*.db"))

    list_of_databases.extend(glob("uploads/*.sqlite3"))
    list_of_databases.extend(glob("uploads/*.db"))
    return list_of_databases
    

if "set_name" not in st.session_state:
    st.session_state.set_name = False
if "userQueryCache" not in st.session_state:
    st.session_state.userQueryCache = None
if "selected_db" not in st.session_state:
    l = get_database_list()
    st.session_state.selected_db = [] if not l else [max(get_database_list(), key=os.path.getctime)]
if "change_db" not in st.session_state:
    st.session_state.change_db = True
if "copilot" not in st.session_state:
    st.session_state.copilot = None


def select_databases(placeholder):
    def _on_change():
        st.session_state.selected_db = st.session_state.databases
        st.write(f"Loading databases: {st.session_state.selected_db}")

    options = placeholder.multiselect(
        label="Select databases to load",
        options=get_database_list(),
        default=st.session_state.selected_db,
        on_change=lambda: _on_change(),
        key="databases",
        disabled=not st.session_state.change_db
    )

    return options


def display_session_ui():
    print("Displaying session UI")
    session_manager = st.session_state.session_storage
    sessions = session_manager.get_sessions()

    # If there are no sessions, create a new one and flags it to be named.
    if session_manager.requires_autogenerated_session:
        session_manager.create_session(f"New Session", rerun=False)
        sessions = session_manager.get_sessions()
        session_manager.get_session_data(sessions[-1])["autogenerate"] = True

    current_session_id = st.selectbox(
        label="Select a session:",
        options=sessions,
        format_func=lambda x: session_manager.get_session_data(x)['name'],
        index=0  # Automatically switch to the most recent session ID
    )  # type: ignore

    current_session = session_manager.get_session_data(current_session_id)

    if "autogenerate" in current_session and current_session["autogenerate"]:
        st.session_state.set_name = True

    print(f"New session: {current_session_id}")
    return current_session_id


def create_copilot(current_session):
    copilot = current_session['data']
    if copilot is None:
        options = st.session_state.selected_db
        print(options)
        database = join_dbs(options)
        st.write(f"Loading database: {database}")

        copilot = Copilot(db=f"{database}, dbtype='sqlite'")
        session_manager.update_session_data(current_session_id, data=copilot)
    return copilot


col1, col2 = st.columns([7, 3])

with st.sidebar:
    # Session data
    # TODO: Load from persistent storage
    if "session_storage" not in st.session_state:
        st.session_state.session_storage = Session_Storage(st.rerun)
    current_session_id = display_session_ui()
    db_placeholder = st.empty()
    databases = select_databases(db_placeholder)

with col1:
    # title
    st.header("Copilot for Business")
    st.subheader(st.session_state.session_storage.get_session_data(current_session_id)["name"])

session_manager = st.session_state.session_storage

if current_session_id is not None:
    # Extend to being more of a chat or asking the same copilot a question.
    # if st.session_state.userQueryCache is not None:
    #     userQuery = st.session_state.userQueryCache
    #     st.session_state.userQueryCache = None
    if st.session_state.copilot is None:
        userQuery = st.chat_input("Enter your question")
        if userQuery:
            st.session_state.change_db = False
            options = db_placeholder.multiselect(
                label="Select databases to load",
                options=get_database_list(),
                default=st.session_state.selected_db,
                disabled=not st.session_state.change_db
            )
            copilot = create_copilot(session_manager.get_session_data(current_session_id))
            st.session_state.copilot = copilot
    else:
        copilot = session_manager.get_session_data(current_session_id)["data"]
        if st.session_state.userQueryCache is not None:
            userQuery = st.session_state.userQueryCache
            st.session_state.userQueryCache = None

    if userQuery:
        # TODO: Do more formatting
        if st.session_state.set_name:
            st.session_state.set_name = False
            session_manager.get_session_data(current_session_id)["autogenerate"] = False
            st.session_state.userQueryCache = userQuery
            placeholder = st.empty()
            for x in session_manager.update_session_name(current_session_id, userQuery):
                placeholder.text(x)
            placeholder.empty()
            st.rerun()

        # display the user's entered prompt
        st.text(f"USER:\n{userQuery}\n\nCOPILOT:")

        status_placeholder = st.empty()
        status = status_placeholder.status("Thinking...")
        copilot.set_status_placeholder(status)
        copilot.query(userQuery)

        # button to allow the user to accept or remove

        if copilot.get_early_answer(userQuery):
            st.write(copilot.get_early_answer(userQuery))
            status_placeholder.empty()
        else:
            plot = copilot.get_plot(userQuery)

            status_placeholder.empty()

            if plot:
                fig = plot.generate()
                config = {'displayModeBar': None}

                # displays the chart created
                st.plotly_chart(fig, config=config)

                # adds a toggle to show the top 10 values of the dataframe only
                if plot.dfLength > 10:
                    topN = st.toggle("Show top 10 values only", False)
                    if topN: plot.topn(10, topN)
                    else: plot.topn(10, topN)

            sqlView = st.toggle("Show SQL", False)
            if sqlView:
                st.write(copilot.get_sql(userQuery))
                if plot:
                    plot.formatSQL()

            if copilot.get_generalised_answer(userQuery):
                st.write(copilot.get_generalised_answer(userQuery))
